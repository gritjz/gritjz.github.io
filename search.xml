<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>.Net6 + WebApi Basics 6</title>
      <link href="/Net6-WebApi-Basics-6/"/>
      <url>/Net6-WebApi-Basics-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Use-SqlSugar-to-connect-with-DB"><a href="#Use-SqlSugar-to-connect-with-DB" class="headerlink" title="Use SqlSugar to connect with DB"></a>Use SqlSugar to connect with DB</h1><p>SQLSugar is relatively simple, less configuration, easy to get started, and more friendly to novices.</p><p><a href="https://www.donet5.com/Home/Doc">SQLSugar</a></p><p>Other ORM: <a href="https://learn.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro?view=aspnetcore-7.0">EF Core</a>, <a href="https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/">ADO.NET</a></p><p><strong>Insall SqlSugarCore</strong></p><p>You can directly install SqlSugar in Nuget by searching <code>SqlSugarCore</code>.</p><p><strong>Dependency Injection</strong></p><p>Use .NET IOC to launch.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SqlsugarSetup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddSqlsugarSetup</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, IConfiguration configuration,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> dbName = <span class="string">&quot;db_master&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SqlSugarScope sqlSugar = <span class="keyword">new</span> SqlSugarScope(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">            &#123;</span><br><span class="line">                DbType = SqlSugar.DbType.SqlServer,</span><br><span class="line">                ConnectionString = configuration[dbName],</span><br><span class="line">                IsAutoCloseConnection = <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">                db =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//Configure Singleton parameters</span></span><br><span class="line">                    db.Aop.OnLogExecuting = (sql, pars) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//Console.WriteLine(sql);//Output sql</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//services.GetService&lt;注入对象&gt;();</span></span><br><span class="line">                &#125;);</span><br><span class="line">            services.AddSingleton&lt;ISqlSugarClient&gt;(sqlSugar);<span class="comment">//SqlSugarScope uses AddSingleton</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>CodeFirst</strong></p><p><a href="https://www.donet5.com/Home/Doc">More Details</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create DB</span></span><br><span class="line">db.DbMaintenance.CreateDatabase();</span><br><span class="line"><span class="comment">//Create Tables</span></span><br><span class="line">db.CodeFirst.InitTables(<span class="keyword">typeof</span>(CodeFirstTable1));</span><br></pre></td></tr></table></figure><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net6 + WebApi Basics 5</title>
      <link href="/Net6-WebApi-Basics-5/"/>
      <url>/Net6-WebApi-Basics-5/</url>
      
        <content type="html"><![CDATA[<h1 id="Entry-Point-and-Configuration-File"><a href="#Entry-Point-and-Configuration-File" class="headerlink" title="Entry Point and Configuration File"></a>Entry Point and Configuration File</h1><h2 id="Entry-Point-File-for-Net-6"><a href="#Entry-Point-File-for-Net-6" class="headerlink" title="Entry Point File for .Net 6"></a>Entry Point File for .Net 6</h2><p>In .Net framework, every program should have a <code>main()</code> in <code>Program.cs</code> as the entry point file. In .Net 6, Microsoft introduced the new concepts of C# 9.0, <a href="https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/top-level-statements">Top-level statement</a>, so that there is no <code>main()</code> any more. </p><p>Even the <code>main()</code> is no longer shown explicitly, it can be still shown when decompiling. So you can treat it as the normal <code>main()</code> exists, which limits only <strong>1</strong> entry point file per project can use the top-level statement.</p><h3 id="Structure-of-Program-cs"><a href="#Structure-of-Program-cs" class="headerlink" title="Structure of Program.cs"></a>Structure of <code>Program.cs</code></h3><p>Let’s watch the code line by line.</p><hr><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br></pre></td></tr></table></figure><p><code>builder</code> will be the object to access point to configure services in the HTTP pipeline and routes.</p><hr><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddControllers();</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br></pre></td></tr></table></figure><p><code>builder.Services</code> is used to configure the services.</p><p>This is actually the concept of the <a href="https://www.tutorialsteacher.com/ioc/ioc-container">IOC container</a>, which uses dependency injection to achieve the following functions.</p><p><strong>Dependency Injection</strong></p><p>Simply put, dependency injection is not as complex as its name. </p><p>Whenever we call a class, we need to use <code>new</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = new object();</span><br></pre></td></tr></table></figure><p>The IOC container is to help the project execute the above <code>new</code> operation in advance. This operation is called dependency injection of service.</p><p><strong>For example,</strong></p><p><code>builder.Services.AddControllers();</code></p><p>AddControllers() as its name is to inject service of controllers in advance. During this process, IOC is equivalent to calling the constructor in <code>WeatherForecastController.cs</code> as follows.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> This is Constructor</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logger&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger = logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we can see that there is parameter in the constructor, so when we call, IOC automatically passes in an <code>ILogger</code> parameter. </p><p>If it is another type of parameter, IOC will also be responsible for passing in other parameters.</p><hr><h2 id="Configuration-File"><a href="#Configuration-File" class="headerlink" title="Configuration File"></a>Configuration File</h2><p>We can get the configurations of project in <code>appsettings.json</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//appsettings.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Microsoft.AspNetCore&quot;</span>: <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Use-configurations-in-Program-cs"><a href="#Use-configurations-in-Program-cs" class="headerlink" title="Use configurations in Program.cs"></a>Use configurations in Program.cs</h3><p>Configure the settings of <code>appsettings.json</code> by following operations.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Level 1</span></span><br><span class="line">Configuration<span class="punctuation">[</span><span class="string">&quot;xxxx&quot;</span><span class="punctuation">]</span>;</span><br><span class="line"><span class="comment">//Level 2</span></span><br><span class="line">Configuration<span class="punctuation">[</span><span class="string">&quot;xxxx:yyyy&quot;</span><span class="punctuation">]</span>;</span><br><span class="line"><span class="comment">//Convert type</span></span><br><span class="line">Configuration.GetValue(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//Get and serialize to a certain type</span></span><br><span class="line">Configuration.GetSection(<span class="string">&quot;xxx&quot;</span>).Get&lt;<span class="string">&quot;TYPE&quot;</span>&gt;();</span><br></pre></td></tr></table></figure><p><strong>For example,</strong></p><p>Modify the <code>appsettings.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft.AspNetCore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Test2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;UserSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Steven&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span>  <span class="number">18</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Add following codes in <code>Program.cs</code> to use configurations.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x1 = builder.Configuration[<span class="string">&quot;Test&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> x2 = builder.Configuration[<span class="string">&quot;Logging:LogLevel:Default&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> x3 = builder.Configuration.GetValue&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;Test2&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Result:</strong><br><img src="/Net6-WebApi-Basics-5/f17e10a437e1b1e96f4757dcfe929b77.png" alt="x1x2x3"></p><p>Note: <code>x3</code> is converted from string to int.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x4 = builder.Configuration.GetSection(<span class="string">&quot;UserSetting&quot;</span>).Get&lt;UserClass&gt;();</span><br></pre></td></tr></table></figure><p>Add a new class called <code>UserClass</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WebApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, we can get the information from <code>&quot;UserSetting&quot;</code> in <code>appsettings.json</code> and serialize it to <code>&quot;UserClass&quot;</code> type.</p><p><strong>Result:</strong><br><img src="/Net6-WebApi-Basics-5/7c3120affe9cda4e171b4bb77e08616d.png" alt="x4"></p><hr><h3 id="Use-configurations-in-controller-or-other-classes"><a href="#Use-configurations-in-controller-or-other-classes" class="headerlink" title="Use configurations in controller or other classes."></a>Use configurations in controller or other classes.</h3><p>We have already known how to use configurations in <code>Program.cs</code>. Now we’d use it in a controller class. </p><p><strong>IConfiguration</strong></p><p>We need to use <code>IConfiguration</code> in the constructor of the controller class.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AControllerClass</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Configuration = configuration;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>For example,</strong></p><p>Add <code>IConfiguration</code> parameter into constructor of <code>WeatherForecastController</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line"><span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> This is Constructor</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logger&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger, IConfiguration configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger = logger;</span><br><span class="line">    Configuration = configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use configurations in functions.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Get Weather</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet(Name = <span class="string">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//use configuration as the same ways used in Program.cs</span></span><br><span class="line">    <span class="keyword">var</span> x1Controller = Configuration[<span class="string">&quot;Test&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net6 + WebApi Basics 4</title>
      <link href="/Net6-WebApi-Basics-4/"/>
      <url>/Net6-WebApi-Basics-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><blockquote><p><a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&tabs=visual-studio">Swagger</a> is a web service for generating, describing and invoking RESTful interfaces. </p></blockquote><p>Simply, Swagger is a service that displays all interfaces you want to explicitly display in the project on the web page, and can perform interface calls and tests. Therefore, 3 main functions can Swagger achieve.</p><ol><li><p><strong>Interface documentation</strong></p><p>List all interfaces in the project on the web page, so that back-end developers do not need to write special interface documents for front-end users;</p></li><li><p><strong>Updated interface information</strong></p><p> After the interface is updated, you only need to modify the Swagger description in the code to generate a new interface document in real time, thus avoiding the problem that the interface document is outdated and cannot be used</p></li><li><p><strong>Call the interface</strong></p><p>Through the Swagger page, we can directly call the interface, which reduces the debugging cost in the project development stage.</p></li></ol><h1 id="Common-Ways-to-use-Swagger"><a href="#Common-Ways-to-use-Swagger" class="headerlink" title="Common Ways to use Swagger"></a>Common Ways to use Swagger</h1><p>Next are some common ways to better use Swagger</p><ol><li><strong><a href="#1">Comment</a></strong></li><li><strong><a href="#2">Version Control</a></strong></li><li><strong><a href="#3">JWT authentication</a></strong></li></ol><hr><h2 id="Comment-in-Swagger"><a href="#Comment-in-Swagger" class="headerlink" title="Comment in Swagger "></a><div id="1">Comment in Swagger </div></h2><p>We hope to add an introduction after each methods or interfaces to facilitate our testing and front-end reading, so that we make comments in Swagger for better understanding.</p><h3 id="Step-I-Turn-on-Documentation-File-Generation"><a href="#Step-I-Turn-on-Documentation-File-Generation" class="headerlink" title="Step I. Turn on Documentation File Generation"></a><strong>Step I. Turn on Documentation File Generation</strong></h3><p>There are <strong>two</strong> methods to turn on <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/recommended-tags">Documentation File Generation</a></p><p><strong><u>Method A:</u></strong>  From Project File (.csproj)</p><p>Right-click your project &gt; Edit Project File &gt; Modify <code>GeneraterDocumentationFile</code> tag to <code>True</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    //Add following code</span><br><span class="line">    <span class="tag">&lt;<span class="name">GenerateDocumentationFile</span>&gt;</span>True<span class="tag">&lt;/<span class="name">GenerateDocumentationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="/Net6-WebApi-Basics-4/37a0f83b92fc0a92b73aa59f0011cc7d.png" alt="Project File"></p><p><strong><u>Method B:</u></strong> From Properties</p><p>Right-click the project -&gt; Properties -&gt; Build -&gt; Output -&gt; Documentation File -&gt; Check to <code>Generate a file containing API documentation</code></p><p><img src="/Net6-WebApi-Basics-4/719ea3637c0d5fc26421d8c1fdf93ea6.png" alt="Properties"></p><h3 id="Step-II-Add-Comment-to-Swagger"><a href="#Step-II-Add-Comment-to-Swagger" class="headerlink" title="Step II. Add Comment to Swagger"></a><strong>Step II. Add Comment to Swagger</strong></h3><p>Add comment as common way for C# to any Controller or Class with <code>///</code> , then the comment will be shown on Swagger UI.</p><p><strong>Add comments to controller</strong><br><img src="/Net6-WebApi-Basics-4/fa255a68c39b6572744145beeb6cebbc.png" alt="comments to controller"></p><p><strong>Add comments to Class</strong><br><img src="/Net6-WebApi-Basics-4/13bf17d4b36c4c6ff5f473f281d77b32.png" alt="comments to Class"></p><p><strong>Result:</strong><br><img src="/Net6-WebApi-Basics-4/47b50c2e7417394ae0f0acacb690fccb.png" alt="result"></p><p><em><strong><u>Note:</u></strong></em></p><ol><li>If the return type is object, Schemas does <strong>NOT</strong> show the comment in Swagger UI.<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(Name = <span class="string">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">object</span>&gt; <span class="title">Get</span>()</span></span><br></pre></td></tr></table></figure></li><li>However, If the get type is specified, <code>Schemas</code> <strong>DOES</strong> show the comment even the return type is <code>object</code>.<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(Name = <span class="string">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">object</span>&gt; <span class="title">Get</span>(<span class="params">WeatherForecast weather_res</span>)</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Version-Control-in-Swagger"><a href="#Version-Control-in-Swagger" class="headerlink" title="Version Control in Swagger"></a><div id="2">Version Control in Swagger</div></h2><p>First, we create a enum class to store the name of versions.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Api Version Enums</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> ABC_Versions</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> VersionV1</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   V1=<span class="number">1.0</span>,</span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> version V2</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   V2=<span class="number">2.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, go to <code>Program.cs</code> and modify <code>AddSwaggerGen()</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSwaggerGen(options =&gt; &#123;</span><br><span class="line">    <span class="comment">//Single Version</span></span><br><span class="line">    <span class="comment">// options.SwaggerDoc(&quot;V1&quot;, new OpenApiInfo </span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     Title = $&quot;Project Name&quot;,</span></span><br><span class="line">    <span class="comment">//     Version = &quot;V1&quot;,</span></span><br><span class="line">    <span class="comment">//     Description = $&quot;Project Name: Current version is &#123;version&#125;&quot;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//Multiple Versions</span></span><br><span class="line">    <span class="keyword">typeof</span>(ApiVersions).GetEnumNames().ToList().ForEach(version =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Add version introduction in Swagger</span></span><br><span class="line">        options.SwaggerDoc(version, <span class="keyword">new</span> OpenApiInfo</span><br><span class="line">        &#123;</span><br><span class="line">            Title = <span class="string">$&quot;Project Name&quot;</span>,</span><br><span class="line">            Version = version,</span><br><span class="line">            Description = <span class="string">$&quot;Project Name: Current version is <span class="subst">&#123;version&#125;</span>&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>typeof(ApiVersions).GetEnumNames().ToList().ForEach</code> is to get all of the enum name from above <code>Api Version Enums</code>.</p><p>And, modify <code>UseSwaggerUI()</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI(options =&gt; &#123;</span><br><span class="line">        <span class="comment">//Single Version</span></span><br><span class="line">        <span class="comment">// options.SwaggerEndpoint($&quot;/swagger/&#123;version&#125;/swagger.json&quot;,$&quot;VERSION:&#123;version&#125;&quot;);</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">//Multiple Version</span></span><br><span class="line">        <span class="keyword">typeof</span>(ApiVersions).GetEnumNames().ToList().ForEach(version =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Switch version</span></span><br><span class="line">            <span class="comment">//1st parameter is which json to choose.</span></span><br><span class="line">            <span class="comment">//2nd parameter is just a name.</span></span><br><span class="line">            options.SwaggerEndpoint(<span class="string">$&quot;/swagger/<span class="subst">&#123;version&#125;</span>/swagger.json&quot;</span>,<span class="string">$&quot;VERSION:<span class="subst">&#123;version&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>SwaggerEndpoint</code> to choose swagger’s json file to switch versions.</p><p>Finally, add an <code>[ApiExplorerSettings(GroupName =&quot;V1&quot;)]</code> attribute to the function in controller.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiExplorerSettings(GroupName =<span class="string">&quot;V1&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>(<span class="params">Wea weather</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">    &#123;</span><br><span class="line">        Date = DateTime.Now.AddDays(index),</span><br><span class="line">        TemperatureC = Random.Shared.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">        Summary = Summaries[Random.Shared.Next(Summaries.Length)]</span><br><span class="line">    &#125;)</span><br><span class="line">    .ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>Result</strong></em></p><p><img src="/Net6-WebApi-Basics-4/227a81cd7acb0033885cb42b6133c6f5.png" alt="V1"></p><p><img src="/Net6-WebApi-Basics-4/57d07b9c0d1e93905d665c922adcb854.png" alt="V2"></p><p>Since the attribute is set to <code>V1</code> for <code>Get()</code>, the interface is only shown is the selected version is <code>V1</code>.<br>If GroupName doesn’t specified the version, the interface will be shown in all versions.</p><p><code>ApiExplorerSettings</code> has two parameters.</p><p><code>[ApiExplorerSettings(GroupName =&quot;V1&quot;, IgnoreApi = false)]</code></p><p><code>GroupName</code>: Name of version</p><p><code>IgnoreApi</code>: Whether the version is ignored.</p><p>When <code>IgnoreApi</code> is set to false,</p><p><img src="/Net6-WebApi-Basics-4/56ca47c5b37b3d6b864ebef53c12308d.png" alt="IgnoreApiFalse"></p><hr><h2 id="JWT-Authentication"><a href="#JWT-Authentication" class="headerlink" title="JWT Authentication"></a><div id="3">JWT Authentication</div></h2><p>Simply go to <code>Program.cs</code> and modify <code>AddSwaggerGen()</code>.<br>More details will be covered later post.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSwaggerGen(options =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    options.AddSecurityDefinition(<span class="string">&quot;Bearer&quot;</span>, <span class="keyword">new</span> OpenApiSecurityScheme()</span><br><span class="line">    &#123;</span><br><span class="line">        Description = <span class="string">&quot;ADD Token into request head：Bearer Token&quot;</span>,</span><br><span class="line">        Name = <span class="string">&quot;Authorization&quot;</span>,</span><br><span class="line">        In = ParameterLocation.Header,</span><br><span class="line">        Type = SecuritySchemeType.ApiKey,</span><br><span class="line">        BearerFormat = <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">        Scheme = <span class="string">&quot;Bearer&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    options.AddSecurityRequirement(<span class="keyword">new</span> OpenApiSecurityRequirement</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> OpenApiSecurityScheme</span><br><span class="line">            &#123;</span><br><span class="line">                Reference = <span class="keyword">new</span> OpenApiReference &#123;</span><br><span class="line">                    Type = ReferenceType.SecurityScheme,</span><br><span class="line">                    Id = <span class="string">&quot;Bearer&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net6 + WebApi Basics 3</title>
      <link href="/Net6-WebApi-Basics-3/"/>
      <url>/Net6-WebApi-Basics-3/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON-Formatter-for-Date"><a href="#JSON-Formatter-for-Date" class="headerlink" title="JSON Formatter for Date"></a>JSON Formatter for Date</h1><h2 id="Why-Formatting-Date"><a href="#Why-Formatting-Date" class="headerlink" title="Why Formatting Date"></a>Why Formatting Date</h2><p>When we receive the returned data, the Json time we return is a long string, which is obviously not front-end friendly. </p><p>As following example, <code>&quot;date&quot;</code> has a lot ambiguous display making people difficult to read.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-29T15:52:14.9140737-05:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperatureC&quot;</span><span class="punctuation">:</span> <span class="number">-8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperatureF&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bracing&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>So we have to format the date and time in the prefered way.</p><h2 id="Method-to-Format-Date"><a href="#Method-to-Format-Date" class="headerlink" title="Method to Format Date"></a>Method to Format Date</h2><p><strong>First,</strong><br>We need to install a add-on package with <code>Nuget</code></p><p>Browse Nuget and install<br><code>Microsoft.AspNetCore.Mvc.NewtonsoftJson</code></p><p><img src="/Net6-WebApi-Basics-3/NewtonsoftJson.png" alt="Install NewtonsoftJson"></p><p><em><strong>Note:</strong></em></p><p>while installing <code>NewtonsoftJson</code>, the version is chosen based on your project’s dependencies. Here I am using version <code>6.0.12</code> for <code>.NET 6</code>.</p><p><strong>Then,</strong></p><p>Find <code>builder.Services.AddControllers()</code> in <code>Program.cs</code>, and modify with following code.</p><p><code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code> is the customized format.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddControllers()</span><br><span class="line">  .AddNewtonsoftJson(options =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      options.SerializerSettings.DateFormatString = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-29 15:55:43&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;temperatureC&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;temperatureF&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Chilly&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>Easy!<br>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net6 + WebApi Basics 2</title>
      <link href="/Net6-WebApi-Basics-2/"/>
      <url>/Net6-WebApi-Basics-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a><strong>Restful API</strong></h1><pre><code>There are two basic points to be noted for Restful API.1. Use HTTP functions to execute CRUD operations.2. The resources are stored in URL.</code></pre><h2 id="Regular-URL-Format"><a href="#Regular-URL-Format" class="headerlink" title="Regular URL Format"></a>Regular URL Format</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Create user</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost/createuser</span></span><br><span class="line"></span><br><span class="line">Delete user with id = <span class="number">1</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost/deleteuser?userid=1</span></span><br><span class="line"></span><br><span class="line">Get user&#x27;s list</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost/getuser</span></span><br><span class="line"></span><br><span class="line">Get user with id = <span class="number">1</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost/getuser?userid=1</span></span><br><span class="line"></span><br><span class="line">update user with id = <span class="number">1</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost/updateuser?userid=1</span></span><br></pre></td></tr></table></figure><h2 id="Restful-URL-Format-with-HTTP-Functions"><a href="#Restful-URL-Format-with-HTTP-Functions" class="headerlink" title="Restful URL Format with HTTP Functions"></a>Restful URL Format with HTTP Functions</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Search users&#x27; list</span><br><span class="line"><span class="punctuation">[</span>GET<span class="punctuation">]</span><span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost/user </span></span><br><span class="line"></span><br><span class="line">Search user <span class="number">1</span>&#x27;s list</span><br><span class="line"><span class="punctuation">[</span>GET<span class="punctuation">]</span><span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost/user/1 </span></span><br><span class="line"></span><br><span class="line">Create an user</span><br><span class="line"><span class="punctuation">[</span>POST<span class="punctuation">]</span><span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost/user </span></span><br><span class="line"></span><br><span class="line">Update user with id=<span class="number">1</span></span><br><span class="line"><span class="punctuation">[</span>PUT<span class="punctuation">]</span><span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost/user/1 </span></span><br><span class="line"></span><br><span class="line">Delete user with id=<span class="number">1</span></span><br><span class="line"><span class="punctuation">[</span>DELETE<span class="punctuation">]</span><span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//localhost/user/1 </span></span><br></pre></td></tr></table></figure><p>For example,<br><code>http://localhost/updateuser?userid=1</code></p><p>This address can be seperated into two parts by <code>?</code>:</p><p><code>URL + ? + Index</code></p><p>Before <code>?</code>, it is a <strong><code>URL</code></strong>, where stores the resources.</p><p>After  <code>?</code>, it is a <strong><code>index</code></strong>, which shows where to find the resources.</p><hr><h3 id="Try-a-Code"><a href="#Try-a-Code" class="headerlink" title="Try a Code"></a><strong>Try a Code</strong></h3><p>Let’s make a trial on the template code of <strong>WeatherForcast</strong> to understand how the <code>URL</code> and <code>Index</code> are set up.</p><p><strong>URL Setup</strong></p><p>Comment the Get() function</p><img src="Comment.png"  alt="Comment" style="zoom:50%;"/><p>Replace with following code</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;GetWeatherForecast/&#123;userid&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> userid</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>Result:</strong></em><br><code>https://localhost:7048/WeatherForecast/GetWeatherForecast/123</code></p><img src="code1.png" alt="code1" style="zoom:50%;"/><p>In <code>HttpGet</code> attribute, use <code>&#123;userid&#125;</code> to identify the <code>userid</code> in URL. The <code>userid</code> can be set in <code>Get()</code>.</p><p><strong>Index Setup</strong></p><p>Now, replace with following code to see how <code>Index</code> is setup.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;GetWeatherForecast/&#123;userid&#125;/&#123;index0&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> userid, <span class="built_in">string</span> index1, <span class="built_in">string</span> index2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>Result:</strong></em><br><code>https://localhost:7048/WeatherForecast/GetWeatherForecast/A/B?index1=C&amp;index2=D</code></p><img src="code2.png" alt="code2" style="zoom:50%;"/><p><strong>Therefore,</strong></p><p>Parameters in both <code>HttpGet</code> and <code>Get</code> are specified as <strong>URL</strong>.</p><p>Parameters in <code>HttpGet</code>, but not in <code>Get</code> are specified as <strong>URL</strong>.</p><p>Parameters in <code>Get</code>, but not in <code>HttpGet</code> are specified as <strong>Index</strong>.</p><p>Multiple <code>Index</code> are connected with <code>&amp;</code> after <code>?</code>.</p><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net6 + WebApi Basics 1</title>
      <link href="/Net6-WebApi-Basics-1/"/>
      <url>/Net6-WebApi-Basics-1/</url>
      
        <content type="html"><![CDATA[<p>This is a tutorial for guys from zero to basic level to quickly understand <code>.Net6 + WebApi</code>. </p><hr><h1 id="What-is-a-WebApi"><a href="#What-is-a-WebApi" class="headerlink" title="What is a WebApi?"></a><strong>What is a WebApi?</strong></h1><p>Simply put, WebApi is the <em><strong>interface</strong></em> between front-end and back-end for <em><strong>data interaction</strong></em>.<br>The front-end sends data to the back-end and the back-end returns data to the front-end using WebApi.</p><h2 id="Create-a-WebApi-Program"><a href="#Create-a-WebApi-Program" class="headerlink" title="Create a WebApi Program"></a>Create a WebApi Program</h2><p>It is convinient to create a WebApi Program.<br><strong>Step 1</strong> - Open Visual Studio<br><img src="/Net6-WebApi-Basics-1/Step1.png" alt="VS" title="VS 2022"><br><strong>Step 2</strong> - Create a new project<br><img src="/Net6-WebApi-Basics-1/Step2.png" alt="New Project"><br><strong>Step 3</strong> - Choose ASP.NET Core Web API<br><img src="/Net6-WebApi-Basics-1/Step3.png" alt="Choose Template"><br><strong>Step 4</strong> - Project Name and Directory<br><img src="/Net6-WebApi-Basics-1/Step4.png" alt="Name and Directory"><br><strong>Step 5</strong> - Choose Framework in .NET 6<br><img src="/Net6-WebApi-Basics-1/Step5.png" alt="Framework"><br><strong>Step 6</strong> - Build and Run Program<br><img src="/Net6-WebApi-Basics-1/Step6.png" alt="Run"><br><strong>Step 7</strong> - Check Availability<br><img src="/Net6-WebApi-Basics-1/Step7.gif" alt="Availability"><br>In the opened website template, which is a weather forecast website provided by default, you can see that<br><code>https://localhost:7048/swagger/index.html</code> is URL.<br><code>7048</code> is the port number.</p><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net6 </category>
          
          <category> WebApi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net6 </tag>
            
            <tag> WebApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Mermaid Diagram in Hexo</title>
      <link href="/Install-Mermaid-Diagram-in-Hexo/"/>
      <url>/Install-Mermaid-Diagram-in-Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="This-article…"><a href="#This-article…" class="headerlink" title="This article…"></a>This article…</h1><p>When I was reviewing the syntax of Markdown (see <a href="https://gritjz.github.io/2022/12/21/Markdown/"><strong>here</strong></a>), I found that I could use Mermaid to make diagrams conviniently, such as flowcharts. Diagrams and documentation take up valuable developer time and can quickly become outdated. However, not having diagrams or documentation breaks productivity and makes it difficult to visually represent information. Mermaid solves this problem by reducing the time, effort, and tools needed to create modifiable diagrams, making the content smarter and more reusable. the text definition of a mermaid diagram allows it to be easily updated, and it can also be part of production scripts and other code.</p><p>However, I got some issues when installing Mermaid. This article will explain how to install Mermaid in your Hexo blog step by step.</p><h2 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h2><p>Hexo-cli: 4.3.0</p><p>npm: 7.15.1</p><p>Mermaid: 9.3.0</p><h1 id="Starts-with"><a href="#Starts-with" class="headerlink" title="Starts with"></a>Starts with</h1><h2 id="Step-1-Install-Mermaid"><a href="#Step-1-Install-Mermaid" class="headerlink" title="Step 1: Install Mermaid"></a>Step 1: Install Mermaid</h2><p>There are many different versions of Mermaid available on the web, and not much information provided in <a href="https://github.com/mermaid-js/mermaid">official Github</a>.</p><p>The Mermaid we use is called <strong>hexo-filter-mermaid-diagrams</strong>, see <a href="https://www.npmjs.com/package/hexo-filter-mermaid-diagrams">Details</a>. </p><p>Use following command with npm.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><h2 id="Step-2-Edit-Configuration"><a href="#Step-2-Edit-Configuration" class="headerlink" title="Step 2: Edit Configuration"></a>Step 2: Edit Configuration</h2><p>Add the following script into the Hexo config file: <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Mermaid Chart</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true </span><br><span class="line">  version: &quot;9.3.0&quot;</span><br><span class="line">  options: </span><br><span class="line">    #startOnload: true </span><br></pre></td></tr></table></figure><h2 id="Step-3-Edit-JS-File"><a href="#Step-3-Edit-JS-File" class="headerlink" title="Step 3: Edit JS File"></a>Step 3: Edit JS File</h2><ol><li><p>File Location</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOUR_THEME/layout/_partial/footer.ejs</span><br></pre></td></tr></table></figure></li><li><p>Add following script into <div> of <code>footer.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.mermaid.enable) &#123; %&gt;</span><br><span class="line">  &lt;script src=&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    if (window.mermaid) &#123;</span><br><span class="line">      mermaid.initialize(&#123;theme: &#x27;forest&#x27;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>Regenerate hexo documents</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo g</span><br></pre></td></tr></table></figure></li><li><p>Test Mermaid</p><p>Now, you should be able to use Mermaid in you hexo blog. </p><p>Try this.</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre class=&quot;mermaid&quot;&gt;</span><br><span class="line">graph TD</span><br><span class="line">    A[Work] --&gt;|Earn money| B(Go shopping)</span><br><span class="line">    B --&gt; C&#123;Considering&#125;</span><br><span class="line">    C --&gt;|One| D[LV]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Stock share]</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>   <pre class="mermaid">    graph TD    A[Work] -->|Earn money| B(Go shopping)    B --> C{Considering}    C -->|One| D[LV]    C -->|Two| E[iPhone]    C -->|Three| F[Stock share]  </pre><p>More details, see <a href="https://github.com/mermaid-js/mermaid">Mermaid Tutorials</a>.</p><h1 id="Possible-Issues"><a href="#Possible-Issues" class="headerlink" title="Possible Issues"></a>Possible Issues</h1><p>In Steps 3, after you added the script into <code>footer.ejs</code> and execute <code>hexo g</code>, the console could hint you that </p><p><code>theme.mermaid.enable</code> and <code>theme.mermaid.version</code> could not be retrieved as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot read property &#x27;enable&#x27; of undefined</span><br><span class="line">Cannot read property &#x27;version&#x27; of undefined</span><br></pre></td></tr></table></figure><p>This is because Hexo cannot find the settings in the theme’s config file, which could be a directory bug.</p><p>Thus, add the script in Step 2 into <code>YOURTHEME/_config.yml</code> (<strong>NOT</strong> Hexo&#x2F;_config.yml)</p><p>If not working, add the script in Step 2 into both of <code>Hexo/_config.yml</code> and <code>YOURTHEME/_config.yml</code>.</p><p>Once you added the script, make sure <code>hexo clean</code> and <code>hexo g</code>. Sometimes, Mermaid won’t refresh w&#x2F;o <code>hexo clean</code>.</p><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Cheatsheet / Markdown 速查表</title>
      <link href="/Markdown/"/>
      <url>/Markdown/</url>
      
        <content type="html"><![CDATA[<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/8872/music/hi.png" alt="greeting bear"></p><hr><h2 id="Heading-标题"><a href="#Heading-标题" class="headerlink" title="Heading 标题"></a>Heading 标题</h2><p>Use <code>#</code> to create heading.<br>使用 <code>#</code> 开头创建标题</p><h3 id="means-H3"><a href="#means-H3" class="headerlink" title="### means H3"></a>### means H3</h3><h4 id="means-H4"><a href="#means-H4" class="headerlink" title="#### means H4"></a>#### means H4</h4><h3 id="Heading-ID-设置标题ID"><a href="#Heading-ID-设置标题ID" class="headerlink" title="Heading ID 设置标题ID"></a>Heading ID 设置标题ID</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Append <span class="code">`&#123;#ID&#125;`</span> with header to add ID for header. You can use this for page jumping.</span><br><span class="line">在标题后添加 <span class="code">`&#123;#ID&#125;`</span> 以为该标题设置ID。你可以用这来实现页面内跳转。</span><br><span class="line"></span><br><span class="line"><span class="section">#### Heading123 &#123;#123&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Blockquote-引用"><a href="#Blockquote-引用" class="headerlink" title="Blockquote 引用"></a>Blockquote 引用</h2><p>Use <code>&gt;</code> to create blockquote. 使用 <code>&gt;</code> 开头创建引用内容</p><blockquote><p>This is block quote,</p><blockquote><p>it has levels.</p><blockquote><p>use different number of  ‘<code>&gt;</code>‘</p></blockquote></blockquote></blockquote><hr><h2 id="Horizontal-Rules-分割线"><a href="#Horizontal-Rules-分割线" class="headerlink" title="Horizontal Rules 分割线"></a>Horizontal Rules 分割线</h2><p>Use <code>***</code> or <code>---</code> to create horizontal rules for contents.<br>使用 <code>***</code> 或 <code>---</code> 开头创建分割线</p><hr><h2 id="Italic-斜体"><a href="#Italic-斜体" class="headerlink" title="Italic 斜体"></a>Italic 斜体</h2><p>Use <code>*ABC*</code> or <code>_ABC_</code> for italicized text.<br>使用 <code>*内容*</code> 进行包裹 或使用 <code>_ 内容 _</code> 进行包裹</p><p><em><code>*italicized text*</code></em>      <em><code>_italicized text_</code></em></p><hr><h2 id="Bold-加粗"><a href="#Bold-加粗" class="headerlink" title="Bold 加粗"></a>Bold 加粗</h2><p>Use <code>**ABC**</code> to bold. 使用 <code>**加粗**</code> 进行包裹</p><p>ABC <strong>ABC</strong></p><hr><h2 id="Strikethrough-删除线"><a href="#Strikethrough-删除线" class="headerlink" title="Strikethrough 删除线"></a>Strikethrough 删除线</h2><p>Use <code>~~ABC~~</code> to create strike-through text.<br>使用 <code>~~删除线~~</code> 进行包裹.</p><p><del>ABC</del></p><hr><h2 id="Highlight-高亮"><a href="#Highlight-高亮" class="headerlink" title="Highlight 高亮"></a>Highlight 高亮</h2><p>Use <code>==</code> to surround to highlight the content.<br>使用 <code>==</code> 包含以高亮显示内容。</p><p>&#x3D;&#x3D;HIGH,HIGH,HIGH&#x3D;&#x3D;</p><hr><h2 id="Subscript-下标"><a href="#Subscript-下标" class="headerlink" title="Subscript 下标"></a>Subscript 下标</h2><p>Use <code>~</code> to surround to subscript.<br>使用 <code>~</code> 来下标内容。</p><p><code>H~2~O</code><br>H<del>2</del>O</p><h2 id="superscript-上标"><a href="#superscript-上标" class="headerlink" title="superscript 上标"></a>superscript 上标</h2><p>Use <code>^</code> to surround to superscript.<br>使用 <code>^</code> 来上标内容。</p><p><code>X^100^</code><br>X^100^</p><hr><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h2><h3 id="Unordered-List-无序列表"><a href="#Unordered-List-无序列表" class="headerlink" title="Unordered List 无序列表"></a>Unordered List 无序列表</h3><p>Use <code>*</code> , <code>-</code> , <code>+</code> + <code>space</code> to create Unordered List. Use <code>tab</code> to level down<br>使用 <code>*</code> 、<code>-</code> 、<code>+</code> 创建无序列表 + <code>空格</code>, 使用<br><code>tab</code> 增加层级。</p><ul><li>1</li><li>2</li><li>3<ul><li>4<ul><li>5<ul><li>6</li></ul></li></ul></li></ul></li></ul><h3 id="Ordered-List-有序列表"><a href="#Ordered-List-有序列表" class="headerlink" title="Ordered List 有序列表"></a>Ordered List 有序列表</h3><p>Use <code>1.</code> + <code>space</code> to create ordered list.<br>使用 <code>1.</code> 开头 + <code>空格</code></p><ol><li><ol><li></li></ol></li><li><ol><li></li></ol></li><li><ol><li></li></ol></li><li><ol><li>Here is <code>1.</code>, but shown as <code>4.</code>.</li></ol></li></ol><h3 id="Task-List-任务列表"><a href="#Task-List-任务列表" class="headerlink" title="Task List 任务列表"></a>Task List 任务列表</h3><p>Valid only with un&#x2F;ordered list, which starts with <code>*</code>.<br>Then, use <code>[ ]</code> or <code>[X]</code> + <code>space</code>, <code>[ ]</code> unchecked , <code>[X]</code> checked<br>搭配无序列表开头<code>*</code> ，然后使用 <code>[ ]</code> 或 <code>[X]</code> + <code>空格</code></p><ul><li><input checked="" disabled="" type="checkbox"> Done</li><li><input disabled="" type="checkbox"> Processing</li></ul><h3 id="Definition-List-定义列表"><a href="#Definition-List-定义列表" class="headerlink" title="Definition List 定义列表"></a>Definition List 定义列表</h3><p>Use definition list to present the definition for a term.</p><p>使用定义列表可以为某个事物赋予定义。</p><pre><code>term: definition</code></pre><dl><dt>term</dt><dd>definition</dd></dl><hr><h2 id="Link-链接"><a href="#Link-链接" class="headerlink" title="Link 链接"></a>Link 链接</h2><h3 id="Website-网站"><a href="#Website-网站" class="headerlink" title="Website 网站"></a>Website 网站</h3><p>Use <code>[link text](link)</code> to create a website link.<br>使用 <code>[link text](link)</code> 创建网站链接。</p><p><a href="https://gritjz.github.io/">ABC</a><br><a href="https://gritjz.github.io/">https://gritjz.github.io/</a></p><h3 id="Image-图片"><a href="#Image-图片" class="headerlink" title="Image 图片"></a>Image 图片</h3><h4 id="Basic-Formart-基本格式"><a href="#Basic-Formart-基本格式" class="headerlink" title="Basic Formart 基本格式"></a>Basic Formart 基本格式</h4><p>Alt text is The Alt tag of the image, which is used to describe the keywords of the image. Image link: It can be the local address or URL of the image. “hover text” will appear when the mouse hovers over the image. Alt text and hover text are optional.<br>Alt text：图片的Alt标签，用来描述图片的关键词。Image link：可以是图片的本地地址或者是网址。”hover text”：鼠标悬置于图片上会出现的标题文字。<br><code>![alt text](Image link.jpg &quot;hover text&quot;)</code></p><h4 id="Local-Image-本地图片"><a href="#Local-Image-本地图片" class="headerlink" title="Local Image 本地图片"></a>Local Image 本地图片</h4><p>You only need to fill in the directory path of the image in basic format, and both of absolute paths and relative paths are supported.<br>图片链接改为本地地址。绝对路径和相对路径都可以。<br><code>![avatar](/USERS/image.jpg &quot;avatar&quot;)</code></p><h4 id="Internet-Image-网络图片"><a href="#Internet-Image-网络图片" class="headerlink" title="Internet Image 网络图片"></a>Internet Image 网络图片</h4><p>Use the Internet link as image link. Not stable if the image link is removed.<br>用图片的网络地址，有可能链接被移除，所以不稳定。</p><pre><code>![avatar](https://upload.wikimedia.org/wikipedia/en/d/d6/Avatar_%282009_film%29_poster.jpg &quot;avatar&quot;)</code></pre><h4 id="Convert-Image-to-Markdown-Document-转换图片为markdown文件（base64）"><a href="#Convert-Image-to-Markdown-Document-转换图片为markdown文件（base64）" class="headerlink" title="Convert Image to Markdown Document 转换图片为markdown文件（base64）"></a>Convert Image to Markdown Document 转换图片为markdown文件（base64）</h4><p>Use the base64 transcoding tool to convert the image into a base64 string, and then fill the string into the link in the basic format.<br>将图片转换成base64形式的字符串，然后把字符串写入链接中。</p><p><code>![ABC](base64 string)</code></p><hr><h2 id="Code-block-代码块"><a href="#Code-block-代码块" class="headerlink" title="Code block 代码块"></a>Code block 代码块</h2><p>Use <code>` `</code> to create code block. or use HTML <code>&lt;code&gt;ABC&lt;/code&gt;</code>.<br>使用 <code>` `</code> 创建短句代码块，或使用HTML <code>&lt;code&gt;ABC&lt;/code&gt;</code></p><p><code>`code`</code><br><code>`&lt;code&gt;ABC&lt;/code&gt;`</code></p><p>Use <code>```javascript</code> to create code block with language mark and use another <code>```</code> at the end of code to fence the code.</p><p>使用 <code>```javascript</code>  创建带语言标识的代码块, 并在代码后加上另一个<code>```</code> 来包含整段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello Steven!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Table-表格"><a href="#Table-表格" class="headerlink" title="Table 表格"></a>Table 表格</h2><p>Use <code>|</code> + <code>space</code> to create table by surrounding the contents with <code>|</code>, like <code>| Table 1 | Table 2 |</code>. After the first line, you need <code>-</code> to be added as <code>| - | - |</code> to identify the first line is table head. Table head will be bolded.<br>使用 <code>|</code> + <code>space</code> 来创建表格。将表格内容用<code>|</code>包含，即<code>| Table 1 | Table 2 |</code>。在定义了一行后，还需要在下一行添加一行 <code>-</code> 表示第一行是表头，即<code>| - | - |</code> ，这样表格就创建好了，之后只需要用 <code>|</code> 添加表格内容就好了。</p><p>| Table 1 | Table 2 |</p><table><thead><tr><th>Table 1</th><th>Table 2</th><th>with <code>-</code></th></tr></thead></table><table><thead><tr><th>Table 1</th><th align="center">Table 2</th></tr></thead><tbody><tr><td>ABC</td><td align="center"><del>DEF</del></td></tr><tr><td>GHI</td><td align="center"><strong>JK</strong> L</td></tr></tbody></table><hr><h2 id="Math-Expression-数学公式"><a href="#Math-Expression-数学公式" class="headerlink" title="Math Expression 数学公式"></a>Math Expression 数学公式</h2><p>Math formula is supported by <a href="https://en.wikipedia.org/wiki/TeX">TeX</a></p><p>数学公式通过 <a href="https://en.wikipedia.org/wiki/TeX">TeX 表达式</a> 支持。</p><p>Use <code>$</code> to surround formula to present single line formula as <code>$E = mc^2$</code>.</p><p>使用 <code>$</code> 包含公式来表示单行公式： <code>$E = mc^2$</code></p><p>$E &#x3D; mc^2$</p><p>Math code block is supported by surrounding with <code>$$</code> .<br>使用 <code>$$</code> 的数学公式块也是支持的。</p><pre><code>$$\begin&#123;aligned&#125;T( (v\_1 + v\_2) \otimes w) &amp;= T(v\_1 \otimes w) + T(v\_2 \otimes w) \\T( v \otimes (w\_1 + w\_2)) &amp;= T(v \otimes w\_1) + T(v \otimes w\_2) \\T( (\alpha v) \otimes w ) &amp;= T( \alpha ( v \otimes w) ) \\T( v \otimes (\alpha w) ) &amp;= T( \alpha ( v \otimes w) ) \\\end&#123;aligned&#125;$$ </code></pre><p>$$<br>\begin{aligned}<br>T( (v_1 + v_2) \otimes w) &amp;&#x3D; T(v_1 \otimes w) + T(v_2 \otimes w) \<br>T( v \otimes (w_1 + w_2)) &amp;&#x3D; T(v \otimes w_1) + T(v \otimes w_2) \<br>T( (\alpha v) \otimes w ) &amp;&#x3D; T( \alpha ( v \otimes w) ) \<br>T( v \otimes (\alpha w) ) &amp;&#x3D; T( \alpha ( v \otimes w) ) \<br>\end{aligned}<br>$$</p><hr><h2 id="Emoji-👻"><a href="#Emoji-👻" class="headerlink" title="Emoji 👻"></a>Emoji 👻</h2><p>Use <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji Cheat Sheet</a> to find the emoji you need and add emoji as <code>:sunglasses:</code> 😎<br>使用 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji 快捷指令</a> 找到想要emoji，然后添加。例如， <code>:sunglasses:</code> 😎</p><hr><h2 id="Diagram-图表"><a href="#Diagram-图表" class="headerlink" title="Diagram 图表"></a>Diagram 图表</h2><p>Diagram is supported by <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a>. You can use <code>&lt;pre class=&quot;mermaid&quot;&gt; graph TD... &lt;/pre&gt;</code>  to create and <code>Diagram1--&gt;Diagram 2</code> to present flow diagram. <a href="https://github.com/mermaid-js/mermaid/blob/develop/README.md">More Details</a></p><p>图表由 <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a> 驱动。你可以输入 <code>&lt;pre class=&quot;mermaid&quot;&gt; graph TD... &lt;/pre&gt;</code> 来添加图表， 并用 <code>```Diagram1--&gt;Diagram 2```</code> 来表示关系。<a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">更多细节</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre class=&quot;mermaid&quot;&gt;</span><br><span class="line">graph TD</span><br><span class="line">    A[Work] --&gt;|Earn money| B(Go shopping)</span><br><span class="line">    B --&gt; C&#123;Considering&#125;</span><br><span class="line">    C --&gt;|One| D[LV]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Stock share]</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph TD    A[Work] -->|Earn money| B(Go shopping)    B --> C{Considering}    C -->|One| D[LV]    C -->|Two| E[iPhone]    C -->|Three| F[Stock share]</pre><p>See <a href="https://gritjz.github.io/2022/12/23/Install-Mermaid-Diagram-in-Hexo/"><strong>Install Mermaid Diagram in Hexo</strong></a></p><hr><h2 id="Comment-注释"><a href="#Comment-注释" class="headerlink" title="Comment 注释"></a>Comment 注释</h2><p>Use <code>[comment]:</code> to comment out for markdown.<br>使用 <code>[comment]:</code> 为markdown添加注释<br><code>[comment]:　YOUCANTSEEME</code></p><hr><h2 id="Collapse-x2F-Fold-折叠"><a href="#Collapse-x2F-Fold-折叠" class="headerlink" title="Collapse&#x2F;Fold 折叠"></a>Collapse&#x2F;Fold 折叠</h2><p>To collapse the code, use HTML <code>&lt;details&gt;</code>.<br>要折叠markdown,可以使用HTML的<code>&lt;details&gt;</code></p><pre><code>&lt;details open&gt; Folded contents &lt;/details&gt;&lt;details close&gt; Folded contents &lt;/details&gt;&lt;details close&gt;&lt;summary&gt;ABC&lt;/summary&gt; Folded contents&lt;/details&gt;</code></pre><p><code>open</code> and <code>close</code> to set collapse on and off by default. You can also use <code>&lt;summary&gt;</code> to change the title of <code>&lt;details&gt;</code>.</p><p><code>open</code> 和 <code>close</code> 是设置折叠是否默认开启。可以搭配 <code>&lt;summary&gt;</code> 来更改 <code>&lt;details&gt;</code>的标题</p><hr><p>Good Day<br>😎</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> Cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
